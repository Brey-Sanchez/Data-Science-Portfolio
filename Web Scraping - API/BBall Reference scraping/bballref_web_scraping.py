# -*- coding: utf-8 -*-
"""Bballref web scraping.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nEYpfzjoI7d0OqKRaBShTbF6KVctxUd7
"""

from bs4 import BeautifulSoup
import requests
import os
import re
import numpy as np
import pandas as pd

pd.set_option('display.max_columns', None)

# Generate a list with all seasons to extract, since 1996
year_seasons = [x for x in range(1996, 2024)]

# Getting the html file for all seasons
for year in year_seasons:
  filename = 'advanced_' + str(year) + '.html'
  url = f'https://www.basketball-reference.com/leagues/NBA_{year}.html'
  page = requests.get(url).text

  # Saving the html files locally so we don't have to send any more requests
  with open(filename, 'w') as f:
    f.write(page)

# Empty list that will contain the dataframes for each year
all_years = []

# Iterating over all html files
for f in os.listdir('/content'):
  if f.endswith('.html'):
    with open(f, 'r') as html_file:
      html_advanced = BeautifulSoup(html_file, 'lxml')

      # Findind the advanced table
      table = html_advanced.find('table', id='advanced-team')
      headers = table.find_all('th', class_=lambda x: x != 'over_header')

      # Getting the column names
      col_names = []

      for h in headers[5:-34]:
        text = h.text
        real_col_name = re.search('[\d\w]+', text)
        if real_col_name != None:
          col_names.append(text)

      col_names.remove('Rk')

      # List that will contain all rows of data
      data_rows = []

      all_rows = table.find_all('tr')

      # Extracting the data
      for r in all_rows:
        all_cells = r.find_all('td')
        row = []
        for c in all_cells[:-3]:
          real_data = re.search('[\d\w]+', c.text)
          if real_data != None:
            row.append(c.text)
        
        data_rows.append(row)

        # Creating a dataframe from the previous list
        final_df = pd.DataFrame(data_rows[2:-1], columns=col_names)
        # Adding the year as a new column (extracted from the file name)
        final_df['year'] = int(f[-9:-5])
      
      # Appending the dataframe to the initial list that we created
      all_years.append(final_df)

# Now we can concatenate all dataframes to get a single one
all_years_df = pd.concat(all_years).reset_index(drop=True)

all_years_df.head()

# Renaming columns as necessary
for i in range(16, 24):
  old_name = all_years_df.columns[i]
  if i < 20:
    new_name = 'off_' + old_name
  else:
    new_name = 'def_' + old_name
    
  all_years_df.columns.values[i] = new_name
  

all_years_df.head()

# Replacing all '*' symbols in team names
all_years_df['Team'] = all_years_df['Team'].apply(lambda x: x.replace('*', ''))

all_years_df['Team'].unique()

# Modifying team names, as certain franchises have been called differently
# over the years. This will make analysis easier later
names_change = {'Charlotte Bobcats': 'Charlotte Hornets',
                'Seattle SuperSonics': 'Oklahoma City Thunder',
                'New Jersey Nets': 'Brooklyn Nets',
                'Vancouver Grizzlies': 'Memphis Grizzlies',
                'Washington Bullets': 'Washington Wizards',
                'New Orleans Hornets': 'New Orleans Pelicans',
                'New Orleans/Oklahoma City Hornets': 'New Orleans Pelicans'}

for key, value in names_change.items():
  all_years_df.loc[all_years_df.Team == key, 'Team'] = value

# Checking that the changes have been applied correctly
for team_name in all_years_df['Team'].unique():
  print(team_name)

all_years_df.shape

# Making sure that there are no nulls
all_years_df.isnull().sum()

all_years_df.apply(lambda x: x == '').sum()

# Checking data types
all_years_df.dtypes

# Most columns should be numeric
num_cols = all_years_df.columns != 'Team'

all_years_df.loc[:, num_cols] = all_years_df.loc[:, num_cols].apply(pd.to_numeric)

# Making sure that changes have been applied correctly
all_years_df.dtypes

all_years_df.isnull().sum()

all_years_df.head()

# Creating new columns for relative defensive, offensive, and net rating
# (compared to league average for the year/season)
for new_col, col in zip(['rel_ORtg', 'rel_DRtg', 'rel_NRtg'], 
                        ['ORtg', 'DRtg', 'NRtg']):
  all_years_df[new_col] = all_years_df.groupby('year')[col].transform(lambda x: x - x.mean())

import matplotlib.pyplot as plt
import seaborn as sns

all_years_df.columns

# Number of years with an above average offense
all_years_df['off_above_avg'] = all_years_df['rel_ORtg'] > 0

# Including only teams with more than 10 seasons
teams_more_10_seasons = all_years_df.groupby('Team').size().loc[lambda x: x >= 10].index.tolist()

filt_df = all_years_df.loc[all_years_df.Team.isin(teams_more_10_seasons), :]

# The plot will be ordered by the number of seasons with an above average
# offense
plot_order = filt_df.groupby('Team')['off_above_avg'].sum().\
             sort_values(ascending=False).index.tolist()

filt_df.head()

# Creating the FacetGrid so each team has a subplot
plt.style.use('default')
g = sns.FacetGrid(data=filt_df, col='Team', col_wrap=5, height=5,
                  col_order=plot_order, sharex=False, xlim=(1996, 2023))

# Drawing the lineplots
g.map_dataframe(sns.lineplot, x='year', y=0)
g.map_dataframe(sns.lineplot, x='year', y='rel_ORtg')

# https://stackoverflow.com/questions/46248348/seaborn-matplotlib-how-to-access-line-values-in-facetgrid
# Filling between lines; green when a team is above average, red when it is
# below average
for ax in g.axes.flat:
  x = ax.lines[0].get_xdata().astype(int)
  y1 = ax.lines[0].get_ydata(0)
  y2 = ax.lines[1].get_ydata()
  ax.fill_between(x, y1, y2, where=y2 < y1, facecolor='red', 
                  interpolate=True, alpha=0.4)
  ax.fill_between(x, y1, y2, where=y2 > y1, facecolor='green', 
                  interpolate=True, alpha=0.4)

# Xtick marks and xtick labels
xticks = [y for y in all_years_df.year.sort_values().unique().tolist()]
xticks = xticks[::2]
g.set(xticks=xticks)
g.set_xticklabels(labels=[str(y) for y in xticks], rotation=45)
g.fig.subplots_adjust(hspace=0.3)

# Y labels
g.set_ylabels('Relative Offensive Rating', fontsize=14)
g.set_titles(template='{col_name}', size=18)

# X labels
g.set_xlabels('')
g.axes[-3].set_xlabel('Year', fontsize=25, labelpad=5)

# Title
g.fig.subplots_adjust(top=0.95)
g.fig.suptitle('Relative Offensive Rating (compared to league average) over the years',
               size=30)

# Years with an above average defense (in this case, it means being
# BELOW league average numerically)
all_years_df['def_above_avg'] = all_years_df['rel_DRtg'] < 0

# Number of years with an above average defense
plot_order_def = all_years_df.groupby('Team')['def_above_avg'].sum().\
                 sort_values(ascending=False).index.tolist()

# FacetGrid for all teams
g = sns.FacetGrid(data=filt_df, col='Team', col_wrap=5, height=5,
                  col_order=plot_order_def, sharex=False, xlim=(1996, 2023))

# Drawing the lineplots
g.map_dataframe(sns.lineplot, x='year', y=0)
g.map_dataframe(sns.lineplot, x='year', y='rel_DRtg')

# https://stackoverflow.com/questions/46248348/seaborn-matplotlib-how-to-access-line-values-in-facetgrid
# Filling between curves; red for a below average defense, green for an above
# average defense
for ax in g.axes.flat:
  x = ax.lines[0].get_xdata().astype(int)
  y1 = ax.lines[0].get_ydata(0)
  y2 = ax.lines[1].get_ydata()
  ax.fill_between(x, y1, y2, where=y2 > y1, facecolor='red', 
                  interpolate=True, alpha=0.4)
  ax.fill_between(x, y1, y2, where=y2 < y1, facecolor='green', 
                  interpolate=True, alpha=0.4)

# Setting xticks and xtick labels
xticks = [y for y in all_years_df.year.sort_values().unique().tolist()]
xticks = xticks[::2]
g.set(xticks=xticks)
g.set_xticklabels(labels=[str(y) for y in xticks], rotation=45)
g.fig.subplots_adjust(hspace=0.3)

# Setting y labels
g.set_ylabels('Relative Defensive Rating', fontsize=18)

# Individual titles for subplots
g.set_titles(template='{col_name}', size=18)

# Title
g.fig.subplots_adjust(top=0.95)
g.fig.suptitle('Relative Defensive Rating (compared to league average) over the years',
               size=30)

# X label
g.set_xlabels('')
g.axes[-3].set_xlabel('Year', fontsize=25, labelpad=5)

plt.savefig('rel_def.png', dpi=300)

# Calculating the percentage of seasons/years with an above average offense
# since 1996
stack_df = all_years_df.groupby('Team')[['off_above_avg']].\
           agg(n_ba=('off_above_avg', lambda x: ((x == 0).sum() / x.count()) * 100),
               n_aa=('off_above_avg', lambda x: (x.sum() / x.count()) * 100 )).reset_index()
           
stack_df.sort_values('n_aa', ascending=True, inplace=True)

# Setting the figure size
figure, ax = plt.subplots(figsize=(10, 14), dpi=300)

# Plotting the % of winning seasons
ax.barh(y=stack_df.Team, width=stack_df.n_aa, color='green',
        alpha=0.7, height=0.8, edgecolor='black')

# Plotting labels (% of seasons with above average offense)
for i, v in enumerate(stack_df.n_aa):
    ax.text(v - 8, i - 0.15, str(round(v, 1)) + ' %', 
            color='black', fontsize=10)

# Plotting the % of losing seasons
ax.barh(y=stack_df.Team, width=stack_df.n_ba, color='red',
        left=stack_df.n_aa, alpha=0.7, height=0.8,
        edgecolor='black')

# Title
plt.title("% of seasons with an offensive rating above (green) or \nbelow (red) league average, since 1996",
          size=14, loc='left', pad=20)

# Axis limits
plt.xlim(0, 100)
plt.ylim(-0.5, 29.5)

# % of years with an above average defense
stack_df_def = all_years_df.groupby('Team')[['def_above_avg']].\
           agg(n_ba=('def_above_avg', lambda x: ((x == 0).sum() / x.count()) * 100),
               n_aa=('def_above_avg', lambda x: (x.sum() / x.count()) * 100 )).reset_index()
           
stack_df_def.sort_values('n_aa', ascending=True, inplace=True)

# Setting the figure size
figure, ax = plt.subplots(figsize=(10, 14), dpi=300)

# Plotting the % of seasons with above average defense
ax.barh(y=stack_df_def.Team, width=stack_df_def.n_aa, color='green',
        alpha=0.7, height=0.8, edgecolor='black')

# Annotating the bars
for i, v in enumerate(stack_df_def.n_aa):
    ax.text(v - 8, i - 0.15, str(round(v, 1)) + ' %', 
            color='black', fontsize=10)

# Plotting the % of seasons with a below average defense
ax.barh(y=stack_df_def.Team, width=stack_df_def.n_ba, color='red',
        left=stack_df_def.n_aa, alpha=0.7, height=0.8,
        edgecolor='black')

# Title
plt.title("% of seasons with a defensive rating above (green) or \nbelow (red) league average, since 1996",
          size=14, loc='left', pad=20)

# Axis limits
plt.xlim(0, 100)
plt.ylim(-0.5, 29.5)

# Years with an above average net rating
all_years_df['nrtg_above_avg'] = all_years_df['rel_NRtg'] > 0

# Number of years with an above average nrtg
plot_order_net = all_years_df.groupby('Team')['nrtg_above_avg'].sum().\
                 sort_values(ascending=False).index.tolist()

# FacetGrid for all teams
g = sns.FacetGrid(data=all_years_df, col='Team', col_wrap=5, height=5,
                  col_order=plot_order_net, sharex=False, xlim=(1996, 2023))

# Drawing the lineplots
g.map_dataframe(sns.lineplot, x='year', y=0)
g.map_dataframe(sns.lineplot, x='year', y='rel_NRtg')

# https://stackoverflow.com/questions/46248348/seaborn-matplotlib-how-to-access-line-values-in-facetgrid
# Filling between curves; red for a below average nrtg, green for an above
# average nrtg
for ax in g.axes.flat:
  x = ax.lines[0].get_xdata().astype(int)
  y1 = ax.lines[0].get_ydata(0)
  y2 = ax.lines[1].get_ydata()
  ax.fill_between(x, y1, y2, where=y2 > y1, facecolor='green', 
                  interpolate=True, alpha=0.4)
  ax.fill_between(x, y1, y2, where=y2 < y1, facecolor='red', 
                  interpolate=True, alpha=0.4)
  
# Adding the max NRtg
t, y, val = all_years_df.loc[all_years_df.rel_NRtg == all_years_df.rel_NRtg.max(),
                             ['Team', 'year', 'rel_NRtg']].values.flatten().tolist()
for ax in g.axes:
  ax.axhline(all_years_df.rel_NRtg.max(), ls='--')

annot_text = 'Best: '  + t + ', ' + str(y) + ': ' + str(round(val, 2)) + ' NRtg'
def annotate(**kwag):
    ax = plt.gca()
    ax.text(0.1, .9, annot_text,
            fontsize=12, fontweight='bold', transform=ax.transAxes)

g.map_dataframe(annotate)

# Setting xticks and xtick labels
xticks = [y for y in all_years_df.year.sort_values().unique().tolist()]
xticks = xticks[::2]
g.set(xticks=xticks)
g.set_xticklabels(labels=[str(y) for y in xticks], rotation=45)
g.fig.subplots_adjust(hspace=0.3)

# Setting y labels
g.set_ylabels('Relative Net Rating', fontsize=18)

# Individual titles for subplots
g.set_titles(template='{col_name}', size=18)

# Title
g.fig.subplots_adjust(top=0.95)
g.fig.suptitle('Relative Net Rating (compared to league average) over the years',
               size=30)

# X label
g.set_xlabels('')
g.axes[-3].set_xlabel('Year', fontsize=25, labelpad=5)

plt.savefig('rel_def.png', dpi=300)